!function(){"use strict";const e=document.querySelector("#profile-edit-button"),t=document.querySelector("#profile-add-button"),s=document.querySelector("#profile-image-button"),r=document.querySelector("#input-name"),i=document.querySelector("#input-description"),n=".cards__list",o="#modal-edit",a="#modal-add",l="#modal-confirm",u="#modal-profile-image",d="#modal-image",h="profile-form",c="add-form",_="profile-image-form",m=".profile__title",p=".profile__paragraph",E=".profile__image",v="#card-template";class b{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this.id=e._id,this.cardData=e.cardData,this.isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleLikeClick=r,this._handleDeleteSubmit=i}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteSubmit(this.id,this)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_renderLikes(){this.isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}updateLikes(e){this.isLiked=e,this._renderLikes()}removeCard(){this._cardElement.remove(),this._cardElement=null}generateCard(){return this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._setEventListeners(),this._renderLikes(),this._cardTitle.textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement}}class L{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_disableButton(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}_enableButton(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}_toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton()}_hasInvalidInput(){return!this._inputList.every((e=>e.validity.valid))}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState(this._inputList,this._buttonElement)}))}))}resetFormValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._disableButton()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class f{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class S{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose(e){e.preventDefault(),"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close-button"))&&this.close()}))}}class C extends S{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputList=this._popupForm.querySelectorAll(".modal__input"),this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}reset(){this._popupForm.reset()}setLoading(e,t){this._submitButton.textContent=e?t:this._submitButtonText}}const g=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}createNewCard(e){return this._request(`${this._baseUrl}/cards`,{method:"POST",body:JSON.stringify(e),headers:this._headers})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}likeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}dislikeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}updateUserInfo(e){let{name:t,about:s}=e;return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",body:JSON.stringify({name:t,about:s}),headers:this._headers})}updateAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar/`,{method:"PATCH",body:JSON.stringify({avatar:e}),headers:this._headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"9aa267fe-3315-41ab-a072-2d6dbd5ca77b","Content-Type":"application/json"}});let k;g.getAppInfo().then((e=>{let[t,s]=e;q.setUserInfo(s.name,s.about),q.setAvatar(s.avatar),k=new f({items:t.reverse(),renderer:e=>{const t=$(e);k.addItem(t)}},n),k.renderItems()})).catch(console.error);const y={},I=new class extends S{constructor(e){super({popupSelector:e}),this._previewImage=this._popupElement.querySelector(".modal__image"),this._previewTitle=this._popupElement.querySelector("#modal-preview")}open(e){this._previewTitle.textContent=e.name,this._previewImage.src=e.link,this._previewImage.alt=e.name,super.open()}}(d),q=new class{constructor(e,t,s){this._userNameElement=document.querySelector(e),this._userDescriptionElement=document.querySelector(t),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._userNameElement.textContent,about:this._userDescriptionElement.textContent}}setUserInfo(e,t){this._userNameElement.textContent=e,this._userDescriptionElement.textContent=t}setAvatar(e){this._avatarElement.src=e}}(m,p,E),B=new class extends S{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}setSubmitAction(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}setLoading(e){this._submitButton.textContent=e?"Deleting...":this._submitButtonText}}(l),w=new C(a,(function(e){F((function(){return g.createNewCard(e).then((e=>{const t=$(e);k.addItem(t),w.reset()}))}),w,"Creating...")})),U=new C(o,(function(e){F((function(){return g.updateUserInfo(e).then((e=>{q.setUserInfo(e.name,e.about)}))}),U)})),x=new C(u,(function(e){F((function(){return g.updateAvatar(e.link).then((e=>{q.setAvatar(e.avatar),x.reset()}))}),x)}));function F(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.setLoading(!0,s),e().then((()=>{t.close()})).catch(console.error).finally((()=>{t.setLoading(!1)}))}function T(e){e.isLiked?g.dislikeCard(e.id).then((()=>{e.updateLikes()})).catch(console.error):g.likeCard(e.id).then((()=>{e.updateLikes(e.id)})).catch(console.error)}function A(e){I.open(e)}function D(e,t){B.open(),B.setSubmitAction((()=>{B.setLoading(!0),g.deleteCard(e).then((()=>{t.removeCard(),B.close()})).catch(console.error).finally((()=>{B.setLoading(!1)}))}))}function $(e){return new b(e,v,A,T,D).generateCard()}var V;s.addEventListener("click",(()=>{y[_].resetFormValidation(),x.open()})),e.addEventListener("click",(()=>{!function(){const{name:e,about:t}=q.getUserInfo();r.value=e,i.value=t}(),y[h].resetFormValidation(),U.open()})),t.addEventListener("click",(()=>{y[c].resetFormValidation(),w.open()})),x.setEventListeners(),w.setEventListeners(),U.setEventListeners(),B.setEventListeners(),I.setEventListeners(),V={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(V.formSelector)).forEach((e=>{const t=new L(V,e),s=e.getAttribute("name");s&&(y[s]=t,t.enableValidation())}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,